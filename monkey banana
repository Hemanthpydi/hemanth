import heapq

class MonkeyBanana:
    def __init__(self, grid_size, monkey1_pos, monkey2_pos, box_pos, banana_pos, obstacles):
        self.grid_size = grid_size
        self.monkey1_pos = monkey1_pos
        self.monkey2_pos = monkey2_pos
        self.box_pos = box_pos
        self.banana_pos = banana_pos
        self.obstacles = obstacles
        self.banana_grabbed = False

    def is_valid(self, position):
        x, y = position
        if 0 <= x < self.grid_size[0] and 0 <= y < self.grid_size[1]:
            if position not in self.obstacles:
                return True
        return False

    def get_neighbors(self, position):
        x, y = position
        moves = [(x+1, y), (x-1, y), (x, y+1), (x, y-1)]
        return [move for move in moves if self.is_valid(move)]

    def heuristic(self, position, target):
        return abs(position[0] - target[0]) + abs(position[1] - target[1])

    def a_star_search(self, start, goal):
        pq = []
        heapq.heappush(pq, (0, start))
        costs = {start: 0}
        came_from = {start: None}
        
        while pq:
            current_cost, current = heapq.heappop(pq)
            if current == goal:
                path = []
                while current:
                    path.append(current)
                    current = came_from[current]
                return path[::-1]
            
            for neighbor in self.get_neighbors(current):
                new_cost = costs[current] + 1
                if neighbor not in costs or new_cost < costs[neighbor]:
                    costs[neighbor] = new_cost
                    priority = new_cost + self.heuristic(neighbor, goal)
                    heapq.heappush(pq, (priority, neighbor))
                    came_from[neighbor] = current
        return []

    def simulate(self):
        if self.banana_grabbed:
            print("Banana already grabbed!")
            return

        path1 = self.a_star_search(self.monkey1_pos, self.box_pos)
        path2 = self.a_star_search(self.monkey2_pos, self.box_pos)

        if path1 and path2:
            print("Monkey1 Path:", path1)
            print("Monkey2 Path:", path2)

        # Decide who gets the box first (shortest path wins or tie-breaker)
        if len(path1) < len(path2):
            self.monkey1_pos = self.box_pos
            print("Monkey1 moves to the box.")
        else:
            self.monkey2_pos = self.box_pos
            print("Monkey2 moves to the box.")

        # Push box under banana
        box_to_banana = self.a_star_search(self.box_pos, self.banana_pos)
        if box_to_banana:
            self.box_pos = self.banana_pos
            print("Box pushed under the banana.")

        # Climb and grab banana
        self.banana_grabbed = True
        print("Banana grabbed! Goal achieved!")

# Define environment
grid_size = (5, 5)
monkey1_pos = (0, 0)
monkey2_pos = (4, 4)
box_pos = (2, 2)
banana_pos = (3, 3)
obstacles = [(1, 1), (1, 2), (2, 1)]

# Simulate the game
game = MonkeyBanana(grid_size, monkey1_pos, monkey2_pos, box_pos, banana_pos, obstacles)
game.simulate()
